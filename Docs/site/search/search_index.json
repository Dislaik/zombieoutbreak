{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to my docs page, currently I'm working on in a community project called ZO Framework (Zombie Outbreak), you can see his documentation here","title":"Home"},{"location":"#home","text":"Welcome to my docs page, currently I'm working on in a community project called ZO Framework (Zombie Outbreak), you can see his documentation here","title":"Home"},{"location":"zo_framework/","text":"Home Welcome to the wiki! the unique and unmatched documentation for Zombie Outbreak Framework. Zombie Outbreak is a Zombie Survival RPG gamemode for FiveM, where as a survivor, you must do everything possible to survive in a world of zombies. Warning This framework is in early access, its release is for development and improvement purposes for a soon stable release.","title":"Home"},{"location":"zo_framework/#home","text":"Welcome to the wiki! the unique and unmatched documentation for Zombie Outbreak Framework. Zombie Outbreak is a Zombie Survival RPG gamemode for FiveM, where as a survivor, you must do everything possible to survive in a world of zombies. Warning This framework is in early access, its release is for development and improvement purposes for a soon stable release.","title":"Home"},{"location":"zo_framework/installation/","text":"Requirements mysql-async Server Artifacts version +3325 (recommended) Installation Put zombieoutbreak folder in your folder resources Add the framework in your server.cfg ensure zombieoutbreak It should look like this set mysql_connection_string \"mysql://<USER>:<PASSWORD>@localhost/zombieoutbreak?charset = utf8mb4\" ensure mapmanager ensure chat ensure spawnmanager ensure sessionmanager ensure rconlog ensure baseevents ensure mysql-async ensure zombieoutbreak Add database zombieoutbreak.sql to your server Error If you have any problem with the installation or framework itself, let me know in Issues","title":"Installation"},{"location":"zo_framework/installation/#requirements","text":"mysql-async Server Artifacts version +3325 (recommended)","title":"Requirements"},{"location":"zo_framework/installation/#installation","text":"Put zombieoutbreak folder in your folder resources Add the framework in your server.cfg ensure zombieoutbreak It should look like this set mysql_connection_string \"mysql://<USER>:<PASSWORD>@localhost/zombieoutbreak?charset = utf8mb4\" ensure mapmanager ensure chat ensure spawnmanager ensure sessionmanager ensure rconlog ensure baseevents ensure mysql-async ensure zombieoutbreak Add database zombieoutbreak.sql to your server Error If you have any problem with the installation or framework itself, let me know in Issues","title":"Installation"},{"location":"zo_framework/client/events/playerdeathdetection/","text":"Player:DeathDetection","title":"Player:DeathDetection"},{"location":"zo_framework/client/events/playerdeathdetection/#playerdeathdetection","text":"","title":"Player:DeathDetection"},{"location":"zo_framework/client/functions/playerdriving/","text":"Player.Driving Player . Driving () This function determine if the player is driving. Example local Player = New ( \"Player\" ) if Player . Driving () then print ( \"Player driving!\" ) end","title":"Player.Driving"},{"location":"zo_framework/client/functions/playerdriving/#playerdriving","text":"Player . Driving () This function determine if the player is driving. Example local Player = New ( \"Player\" ) if Player . Driving () then print ( \"Player driving!\" ) end","title":"Player.Driving"},{"location":"zo_framework/client/functions/playerrunning/","text":"Player.Running Player . Running () This function determine if the player is running. Example local Player = New ( \"Player\" ) if Player . Running () then print ( \"Player running!\" ) end","title":"Player.Running"},{"location":"zo_framework/client/functions/playerrunning/#playerrunning","text":"Player . Running () This function determine if the player is running. Example local Player = New ( \"Player\" ) if Player . Running () then print ( \"Player running!\" ) end","title":"Player.Running"},{"location":"zo_framework/client/functions/playershooting/","text":"Player.Shooting Player . Shooting () This function determine if the player is shooting some weapon. Example local Player = New ( \"Player\" ) if Player . Shooting () then print ( \"Player shooting!\" ) end","title":"Player.Shooting"},{"location":"zo_framework/client/functions/playershooting/#playershooting","text":"Player . Shooting () This function determine if the player is shooting some weapon. Example local Player = New ( \"Player\" ) if Player . Shooting () then print ( \"Player shooting!\" ) end","title":"Player.Shooting"},{"location":"zo_framework/client/functions/playershownotification/","text":"Player.ShowNotification Player . ShowNotification ( Message ) This function show a notification Arguments Argument Type Optional Default Value Explanation Message string No - Message content Example local Player = New ( \"Player\" ) Player . ShowNotification ( \"Test\" )","title":"Player.ShowNotification"},{"location":"zo_framework/client/functions/playershownotification/#playershownotification","text":"Player . ShowNotification ( Message ) This function show a notification","title":"Player.ShowNotification"},{"location":"zo_framework/client/functions/playershownotification/#arguments","text":"Argument Type Optional Default Value Explanation Message string No - Message content Example local Player = New ( \"Player\" ) Player . ShowNotification ( \"Test\" )","title":"Arguments"},{"location":"zo_framework/client/functions/registerclothes/","text":"Register.Clothes Register . Clothes ( Item , Sex , Component , DrawableId ) This function register an item how a usable clothes. Arguments Argument Type Optional Default Value Explanation Item string No - Item that can be usable Sex string No - Clothes for player sex Component integer No - Component of skin DrawableId integer No - DrawableId of component Info Go to <Link> for all clothes Example local Register = New ( \"Register\" ) Register . Clothes ( \"test\" , \"male\" , 0 , 52 ) Register . Clothes ( \"test\" , \"female\" , 0 , 55 )","title":"Register.Clothes"},{"location":"zo_framework/client/functions/registerclothes/#registerclothes","text":"Register . Clothes ( Item , Sex , Component , DrawableId ) This function register an item how a usable clothes.","title":"Register.Clothes"},{"location":"zo_framework/client/functions/registerclothes/#arguments","text":"Argument Type Optional Default Value Explanation Item string No - Item that can be usable Sex string No - Clothes for player sex Component integer No - Component of skin DrawableId integer No - DrawableId of component Info Go to <Link> for all clothes Example local Register = New ( \"Register\" ) Register . Clothes ( \"test\" , \"male\" , 0 , 52 ) Register . Clothes ( \"test\" , \"female\" , 0 , 55 )","title":"Arguments"},{"location":"zo_framework/scripting_manual/data/","text":"Data Config Location: Example/Data/Config.lua Config = {} Config . Test = \"Example config test\" Load in a lua file local Config = Load ( \"Data/Config.lua\" )[ \"Config\" ] print ( Config . Test ) -- Prints \"Example config test\" Note You can see this example in @zombieoutbreak/Modules/User/Example Translations Location: Example/Data/Locales/EN.lua Translations = { [ \"Test\" ] = \"This is a example test\" } Load in a lua file local Translations = Load ( \"Data/Locales/EN.lua\" )[ \"Translations\" ] LoadTranslation ( Translations ) print ( Translate ( \"Example:Test\" )) --Prints \"This is a example test\" Note You can see this example in @zombieoutbreak/Modules/User/Example","title":"Data"},{"location":"zo_framework/scripting_manual/data/#data","text":"","title":"Data"},{"location":"zo_framework/scripting_manual/data/#config","text":"Location: Example/Data/Config.lua Config = {} Config . Test = \"Example config test\" Load in a lua file local Config = Load ( \"Data/Config.lua\" )[ \"Config\" ] print ( Config . Test ) -- Prints \"Example config test\" Note You can see this example in @zombieoutbreak/Modules/User/Example","title":"Config"},{"location":"zo_framework/scripting_manual/data/#translations","text":"Location: Example/Data/Locales/EN.lua Translations = { [ \"Test\" ] = \"This is a example test\" } Load in a lua file local Translations = Load ( \"Data/Locales/EN.lua\" )[ \"Translations\" ] LoadTranslation ( Translations ) print ( Translate ( \"Example:Test\" )) --Prints \"This is a example test\" Note You can see this example in @zombieoutbreak/Modules/User/Example","title":"Translations"},{"location":"zo_framework/scripting_manual/modules/","text":"Modules What is modules concept? Modules is a set of standardized parts or independent units that can be used to construct a more complex structure, in this case, a framework for FiveM. Which are core files that conform a module? A module is made up of three core files Events.lua Main.lua Module.lua It's not necessary that each of them obligatory exist in a module to function, but they are the only functional ones to perform their respective operations. - Events.lua All events of the module must be was here, this is the first file loaded in any module, a module need pre-loading his events for to later be available to be used. - Main.lua Here happens all process of must be initialized. - Module.lua In this file, you can create functions that can be shared with another modules (or use for himself). Example Module Name: ModuleSource Module . Test = function () print ( \"This is a example from ModuleSource\" ) end Module Name: ModuleTarget local ModuleTest = New ( \"ModuleSource\" ) ModuleTest . Test () -- Prints \"This is a example from ModuleSource\" Warning It's recommended to caution module call on Module.lua or maybe you get a infinite bucle that result in a crash. How running a module? You can running a module in a Json file called Modules.json , you can found this file in each of the module groups. [ \"ModuleName\" ] What is INFO.md? Is a file that contain all information about the module, its use is purely to help keep everything neat and organized.","title":"Modules"},{"location":"zo_framework/scripting_manual/modules/#modules","text":"","title":"Modules"},{"location":"zo_framework/scripting_manual/modules/#what-is-modules-concept","text":"Modules is a set of standardized parts or independent units that can be used to construct a more complex structure, in this case, a framework for FiveM.","title":"What is modules concept?"},{"location":"zo_framework/scripting_manual/modules/#which-are-core-files-that-conform-a-module","text":"A module is made up of three core files Events.lua Main.lua Module.lua It's not necessary that each of them obligatory exist in a module to function, but they are the only functional ones to perform their respective operations. - Events.lua All events of the module must be was here, this is the first file loaded in any module, a module need pre-loading his events for to later be available to be used. - Main.lua Here happens all process of must be initialized. - Module.lua In this file, you can create functions that can be shared with another modules (or use for himself). Example Module Name: ModuleSource Module . Test = function () print ( \"This is a example from ModuleSource\" ) end Module Name: ModuleTarget local ModuleTest = New ( \"ModuleSource\" ) ModuleTest . Test () -- Prints \"This is a example from ModuleSource\" Warning It's recommended to caution module call on Module.lua or maybe you get a infinite bucle that result in a crash.","title":"Which are core files that conform a module?"},{"location":"zo_framework/scripting_manual/modules/#how-running-a-module","text":"You can running a module in a Json file called Modules.json , you can found this file in each of the module groups. [ \"ModuleName\" ]","title":"How running a module?"},{"location":"zo_framework/scripting_manual/modules/#what-is-infomd","text":"Is a file that contain all information about the module, its use is purely to help keep everything neat and organized.","title":"What is INFO.md?"},{"location":"zo_framework/scripting_manual/events/listeningevents/","text":"Listening Events Use RegisterEvent() for create events on client/server side, you can optionally use the default functions to create events. RegisterEvent ( \"ModuleName:EventName\" , function ( Argument ) -- TODO end )","title":"Listening Events"},{"location":"zo_framework/scripting_manual/events/listeningevents/#listening-events","text":"Use RegisterEvent() for create events on client/server side, you can optionally use the default functions to create events. RegisterEvent ( \"ModuleName:EventName\" , function ( Argument ) -- TODO end )","title":"Listening Events"},{"location":"zo_framework/scripting_manual/events/triggeringevents/","text":"Triggering Events Triggering local events TriggerEvent ( \"ModuleName:EventName\" , Argument ) Triggering client events TriggerClientEvent ( \"ModuleName:EventName\" , Source , Argument ) Triggering server events TriggerServerEvent ( \"ModuleName:EventName\" , Argument )","title":"Triggering Events"},{"location":"zo_framework/scripting_manual/events/triggeringevents/#triggering-events","text":"Triggering local events TriggerEvent ( \"ModuleName:EventName\" , Argument ) Triggering client events TriggerClientEvent ( \"ModuleName:EventName\" , Source , Argument ) Triggering server events TriggerServerEvent ( \"ModuleName:EventName\" , Argument )","title":"Triggering Events"},{"location":"zo_framework/server/events/playerdeathdetection/","text":"","title":"Playerdeathdetection"},{"location":"zo_framework/server/functions/player/additem/","text":"Player.AddItem Player . AddItem ( Item , Count ) This function add items to player inventory Arguments Argument Type Optional Default Value Explanation Item string No - Item name Count integer No - Item count Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . AddItem ( \"item\" , 1 ) end )","title":"Player.AddItem"},{"location":"zo_framework/server/functions/player/additem/#playeradditem","text":"Player . AddItem ( Item , Count ) This function add items to player inventory","title":"Player.AddItem"},{"location":"zo_framework/server/functions/player/additem/#arguments","text":"Argument Type Optional Default Value Explanation Item string No - Item name Count integer No - Item count Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . AddItem ( \"item\" , 1 ) end )","title":"Arguments"},{"location":"zo_framework/server/functions/player/addweapon/","text":"Player.AddWeapon Player . AddWeapon ( WeaponName , Ammo , Components , Tint ) This function add a weapon to player inventory Arguments Argument Type Optional Default Value Explanation WeaponName string No - Weapon name Ammo integer Yes 0 Weapon ammo Components array Yes nil Weapon components Tint integer Yes 0 Weapon tint Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . AddWeapon ( \"weapon_pistol\" , 60 , { \"Flashlight\" }, 2 ) end )","title":"Player.AddWeapon"},{"location":"zo_framework/server/functions/player/addweapon/#playeraddweapon","text":"Player . AddWeapon ( WeaponName , Ammo , Components , Tint ) This function add a weapon to player inventory","title":"Player.AddWeapon"},{"location":"zo_framework/server/functions/player/addweapon/#arguments","text":"Argument Type Optional Default Value Explanation WeaponName string No - Weapon name Ammo integer Yes 0 Weapon ammo Components array Yes nil Weapon components Tint integer Yes 0 Weapon tint Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . AddWeapon ( \"weapon_pistol\" , 60 , { \"Flashlight\" }, 2 ) end )","title":"Arguments"},{"location":"zo_framework/server/functions/player/addweaponammo/","text":"Player.AddWeaponAmmo Player . AddWeaponAmmo ( WeaponName , Ammo ) This function add ammo to a weapon of player Arguments Argument Type Optional Default Value Explanation WeaponName string No - Weapon name Ammo integer No - Weapon ammo Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . AddWeaponAmmo ( \"weapon_pistol\" , 60 ) end","title":"Player.AddWeaponAmmo"},{"location":"zo_framework/server/functions/player/addweaponammo/#playeraddweaponammo","text":"Player . AddWeaponAmmo ( WeaponName , Ammo ) This function add ammo to a weapon of player","title":"Player.AddWeaponAmmo"},{"location":"zo_framework/server/functions/player/addweaponammo/#arguments","text":"Argument Type Optional Default Value Explanation WeaponName string No - Weapon name Ammo integer No - Weapon ammo Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . AddWeaponAmmo ( \"weapon_pistol\" , 60 ) end","title":"Arguments"},{"location":"zo_framework/server/functions/player/cancarryitem/","text":"Player.CanCarryItem Player . CanCarryItem ( Item , Count ) This function determine if you can carry an item. Arguments Argument Type Optional Default Value Explanation Item string No - Item name Count integer No - Item count Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) if _Player . CanCarryItem ( \"item\" , 1 ) then _Player . AddItem ( \"item\" , 1 ) else print ( \"Player can't carry more items\" ) end end )","title":"Player.CanCarryItem"},{"location":"zo_framework/server/functions/player/cancarryitem/#playercancarryitem","text":"Player . CanCarryItem ( Item , Count ) This function determine if you can carry an item.","title":"Player.CanCarryItem"},{"location":"zo_framework/server/functions/player/cancarryitem/#arguments","text":"Argument Type Optional Default Value Explanation Item string No - Item name Count integer No - Item count Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) if _Player . CanCarryItem ( \"item\" , 1 ) then _Player . AddItem ( \"item\" , 1 ) else print ( \"Player can't carry more items\" ) end end )","title":"Arguments"},{"location":"zo_framework/server/functions/player/currentweight/","text":"Player.CurrentWeight Player . CurrentWeight () This function gets current weight of player Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Weight = _Player . CurrentWeight () print ( Weight ) -- Returns current weight of player end )","title":"Player.CurrentWeight"},{"location":"zo_framework/server/functions/player/currentweight/#playercurrentweight","text":"Player . CurrentWeight () This function gets current weight of player Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Weight = _Player . CurrentWeight () print ( Weight ) -- Returns current weight of player end )","title":"Player.CurrentWeight"},{"location":"zo_framework/server/functions/player/exists/","text":"Player.Exists Player . Exists () This function determines if the player exists. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local PlayerExist = _Player . Exists () print ( PlayerExist ) -- Returns true or false end )","title":"Player.Exists"},{"location":"zo_framework/server/functions/player/exists/#playerexists","text":"Player . Exists () This function determines if the player exists. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local PlayerExist = _Player . Exists () print ( PlayerExist ) -- Returns true or false end )","title":"Player.Exists"},{"location":"zo_framework/server/functions/player/getgroup/","text":"Player.GetGroup Player . GetGroup () This function gets player group. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Group = _Player . GetGroup () print ( Group ) -- Returns player group end )","title":"Player.GetGroup"},{"location":"zo_framework/server/functions/player/getgroup/#playergetgroup","text":"Player . GetGroup () This function gets player group. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Group = _Player . GetGroup () print ( Group ) -- Returns player group end )","title":"Player.GetGroup"},{"location":"zo_framework/server/functions/player/getidentity/","text":"Player.GetIdentity Player . GetIdentity () This function gets player identity. Data Data Type Explanation Name string Player Name Date Of Birth string Player Date of Birth Sex string Player Gender Occupation string Player Occupation Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Identity = _Player . GetIdentity () for key , value in pairs ( Identity ) do print ( key , value ) -- Returns a table key-value of the player identity end end )","title":"Player.GetIdentity"},{"location":"zo_framework/server/functions/player/getidentity/#playergetidentity","text":"Player . GetIdentity () This function gets player identity.","title":"Player.GetIdentity"},{"location":"zo_framework/server/functions/player/getidentity/#data","text":"Data Type Explanation Name string Player Name Date Of Birth string Player Date of Birth Sex string Player Gender Occupation string Player Occupation Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Identity = _Player . GetIdentity () for key , value in pairs ( Identity ) do print ( key , value ) -- Returns a table key-value of the player identity end end )","title":"Data"},{"location":"zo_framework/server/functions/player/getinventory/","text":"Player.GetInventory Player . GetInventory () This function gets player inventory. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Inventory = _Player . GetInventory () for key , value in pairs ( Inventory ) do print ( key , value ) -- Returns a table key-value of the player inventory end end )","title":"Player.GetInventory"},{"location":"zo_framework/server/functions/player/getinventory/#playergetinventory","text":"Player . GetInventory () This function gets player inventory. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Inventory = _Player . GetInventory () for key , value in pairs ( Inventory ) do print ( key , value ) -- Returns a table key-value of the player inventory end end )","title":"Player.GetInventory"},{"location":"zo_framework/server/functions/player/getname/","text":"Player.GetName Player . GetName () This function gets player name. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Name = _Player . GetName () print ( Name ) -- Returns player name end )","title":"Player.GetName"},{"location":"zo_framework/server/functions/player/getname/#playergetname","text":"Player . GetName () This function gets player name. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Name = _Player . GetName () print ( Name ) -- Returns player name end )","title":"Player.GetName"},{"location":"zo_framework/server/functions/player/getoccupation/","text":"Player.GetOccupation Player . GetOccupation () This function gets player occupation. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Occupation = _Player . GetOccupation () print ( Occupation ) -- Returns player occupation end )","title":"Player.GetOccupation"},{"location":"zo_framework/server/functions/player/getoccupation/#playergetoccupation","text":"Player . GetOccupation () This function gets player occupation. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Occupation = _Player . GetOccupation () print ( Occupation ) -- Returns player occupation end )","title":"Player.GetOccupation"},{"location":"zo_framework/server/functions/player/getsex/","text":"Player.GetSex Player . GetSex () This function gets player sex. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Sex = _Player . GetSex () print ( Sex ) -- Returns player sex end )","title":"Player.GetSex"},{"location":"zo_framework/server/functions/player/getsex/#playergetsex","text":"Player . GetSex () This function gets player sex. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Sex = _Player . GetSex () print ( Sex ) -- Returns player sex end )","title":"Player.GetSex"},{"location":"zo_framework/server/functions/player/getskin/","text":"Player.GetSkin Player . GetSkin () This function gets player skin. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Skin = _Player . GetSkin () for key , value in pairs ( Skin ) do print ( key , value ) -- Returns a table with the player inventory end end )","title":"Player.GetSkin"},{"location":"zo_framework/server/functions/player/getskin/#playergetskin","text":"Player . GetSkin () This function gets player skin. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Skin = _Player . GetSkin () for key , value in pairs ( Skin ) do print ( key , value ) -- Returns a table with the player inventory end end )","title":"Player.GetSkin"},{"location":"zo_framework/server/functions/player/hasitem/","text":"Player.HasItem Player . HasItem ( Item ) This function determines if the player has a certain item. Arguments Argument Type Optional Default Value Explanation Item string No - Item name Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local HasItem , Count = _Player . HasItem ( \"item\" ) if HasItem then print ( \"Player has item x\" .. Count .. \" in his inventory\" ) end end )","title":"Player.HasItem"},{"location":"zo_framework/server/functions/player/hasitem/#playerhasitem","text":"Player . HasItem ( Item ) This function determines if the player has a certain item.","title":"Player.HasItem"},{"location":"zo_framework/server/functions/player/hasitem/#arguments","text":"Argument Type Optional Default Value Explanation Item string No - Item name Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local HasItem , Count = _Player . HasItem ( \"item\" ) if HasItem then print ( \"Player has item x\" .. Count .. \" in his inventory\" ) end end )","title":"Arguments"},{"location":"zo_framework/server/functions/player/hasweapon/","text":"Player.HasWeapon Player . HasWeapon ( WeaponName ) This function determines if the player has a weapon. Arguments Argument Type Optional Default Value Explanation WeaponName string No - Weapon name Example ```lua local Player = New(\"Player\") RegisterEvent(\"ModuleName:EventName\", function() local _Player = Player.Properties(source) if _Player.HasWeapon(\"weapon_pistol\") then print(\"Player has pistol in his inventory\") end end) ```","title":"Player.HasWeapon"},{"location":"zo_framework/server/functions/player/hasweapon/#playerhasweapon","text":"Player . HasWeapon ( WeaponName ) This function determines if the player has a weapon.","title":"Player.HasWeapon"},{"location":"zo_framework/server/functions/player/hasweapon/#arguments","text":"Argument Type Optional Default Value Explanation WeaponName string No - Weapon name Example ```lua local Player = New(\"Player\") RegisterEvent(\"ModuleName:EventName\", function() local _Player = Player.Properties(source) if _Player.HasWeapon(\"weapon_pistol\") then print(\"Player has pistol in his inventory\") end end) ```","title":"Arguments"},{"location":"zo_framework/server/functions/player/identifier/","text":"Player.Identifier Player . Identifier () This function gets player identifier. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Identifier = _Player . Identifier () print ( Identifier ) -- Returns player identifier end )","title":"Player.Identifier"},{"location":"zo_framework/server/functions/player/identifier/#playeridentifier","text":"Player . Identifier () This function gets player identifier. Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) local Identifier = _Player . Identifier () print ( Identifier ) -- Returns player identifier end )","title":"Player.Identifier"},{"location":"zo_framework/server/functions/player/removeitem/","text":"Player.RemoveItem Player . RemoveItem ( Item , Count ) This function remove items to player inventory Arguments Argument Type Optional Default Value Explanation Item string No - Item name Count integer No - Item count Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . RemoveItem ( \"item\" , 1 ) end )","title":"Player.RemoveItem"},{"location":"zo_framework/server/functions/player/removeitem/#playerremoveitem","text":"Player . RemoveItem ( Item , Count ) This function remove items to player inventory","title":"Player.RemoveItem"},{"location":"zo_framework/server/functions/player/removeitem/#arguments","text":"Argument Type Optional Default Value Explanation Item string No - Item name Count integer No - Item count Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . RemoveItem ( \"item\" , 1 ) end )","title":"Arguments"},{"location":"zo_framework/server/functions/player/removeweapon/","text":"Player.RemoveWeapon Player . RemoveWeapon ( WeaponName ) This function remove a weapon to player inventory Arguments Argument Type Optional Default Value Explanation WeaponName string No - Weapon name Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . RemoveWeapon ( \"weapon_pistol\" ) end )","title":"Player.RemoveWeapon"},{"location":"zo_framework/server/functions/player/removeweapon/#playerremoveweapon","text":"Player . RemoveWeapon ( WeaponName ) This function remove a weapon to player inventory","title":"Player.RemoveWeapon"},{"location":"zo_framework/server/functions/player/removeweapon/#arguments","text":"Argument Type Optional Default Value Explanation WeaponName string No - Weapon name Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . RemoveWeapon ( \"weapon_pistol\" ) end )","title":"Arguments"},{"location":"zo_framework/server/functions/player/removeweaponammo/","text":"Player.RemoveWeaponAmmo Player . RemoveWeaponAmmo ( WeaponName , Ammo ) This function remove ammo from a weapon of player Arguments Argument Type Optional Default Value Explanation WeaponName string No - Weapon name Ammo integer No - Weapon ammo Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . RemoveWeaponAmmo ( \"weapon_pistol\" , 60 ) end )","title":"Player.RemoveWeaponAmmo"},{"location":"zo_framework/server/functions/player/removeweaponammo/#playerremoveweaponammo","text":"Player . RemoveWeaponAmmo ( WeaponName , Ammo ) This function remove ammo from a weapon of player","title":"Player.RemoveWeaponAmmo"},{"location":"zo_framework/server/functions/player/removeweaponammo/#arguments","text":"Argument Type Optional Default Value Explanation WeaponName string No - Weapon name Ammo integer No - Weapon ammo Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . RemoveWeaponAmmo ( \"weapon_pistol\" , 60 ) end )","title":"Arguments"},{"location":"zo_framework/server/functions/player/shownotification/","text":"Player.ShowNotification Player . ShowNotification ( Message ) This function show a notification Arguments Argument Type Optional Default Value Explanation Message string No - Message content Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . ShowNotification ( \"Test\" ) end )","title":"Player.ShowNotification"},{"location":"zo_framework/server/functions/player/shownotification/#playershownotification","text":"Player . ShowNotification ( Message ) This function show a notification","title":"Player.ShowNotification"},{"location":"zo_framework/server/functions/player/shownotification/#arguments","text":"Argument Type Optional Default Value Explanation Message string No - Message content Example local Player = New ( \"Player\" ) RegisterEvent ( \"ModuleName:EventName\" , function () local _Player = Player . Properties ( source ) _Player . ShowNotification ( \"Test\" ) end )","title":"Arguments"},{"location":"zo_framework/server/functions/register/item/","text":"Register.Item Register . Item ( Item , CB ) This function creates an executable process when used. Arguments Argument Type Optional Default Value Explanation Item string No - Item that can be usable CB function No - Code when used Example local Register = New ( \"Register\" ) Register . Item ( \"item\" , function () print ( \"Item used\" ) end )","title":"Register.Item"},{"location":"zo_framework/server/functions/register/item/#registeritem","text":"Register . Item ( Item , CB ) This function creates an executable process when used.","title":"Register.Item"},{"location":"zo_framework/server/functions/register/item/#arguments","text":"Argument Type Optional Default Value Explanation Item string No - Item that can be usable CB function No - Code when used Example local Register = New ( \"Register\" ) Register . Item ( \"item\" , function () print ( \"Item used\" ) end )","title":"Arguments"},{"location":"zo_framework/shared/events/","text":"","title":"Index"},{"location":"zo_framework/shared/functions/utils/random/","text":"Utils.Random Utils . Random ( Min , Max ) This function return a random integer value Arguments Argument Type Optional Default Value Explanation Min integer No - Min number integer Max integer No - Max number integer Example local Utils = New ( \"Utils\" ) print ( Utils . Random ( 0 , 10 )) -- Prints a integer value between 0 and 10","title":"Utils.Random"},{"location":"zo_framework/shared/functions/utils/random/#utilsrandom","text":"Utils . Random ( Min , Max ) This function return a random integer value","title":"Utils.Random"},{"location":"zo_framework/shared/functions/utils/random/#arguments","text":"Argument Type Optional Default Value Explanation Min integer No - Min number integer Max integer No - Max number integer Example local Utils = New ( \"Utils\" ) print ( Utils . Random ( 0 , 10 )) -- Prints a integer value between 0 and 10","title":"Arguments"}]}